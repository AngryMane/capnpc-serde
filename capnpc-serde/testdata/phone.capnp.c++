// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: phone.capnp

#include "phone.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<30> b_d826df210eab943e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     62, 148, 171,  14,  33, 223,  38, 216,
     21,   0,   0,   0,   3,   0,   0,   0,
     54,  11, 191,  20,  31, 173, 185, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  80,  72, 111,
    110, 101,  73,  70,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6, 100, 190,  18, 150,  10,  22, 177,
     74, 123,  57, 157, 123, 136, 117, 209,
     17,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    116, 101, 115, 116,  77, 101, 115, 115,
     97, 103, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d826df210eab943e = b_d826df210eab943e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d826df210eab943e[] = {
  &s_b1160a9612be6406,
  &s_d175887b9d397b4a,
};
static const uint16_t m_d826df210eab943e[] = {0};
const ::capnp::_::RawSchema s_d826df210eab943e = {
  0xd826df210eab943e, b_d826df210eab943e.words, 30, d_d826df210eab943e, m_d826df210eab943e,
  2, 1, nullptr, nullptr, nullptr, { &s_d826df210eab943e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b1160a9612be6406 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 100, 190,  18, 150,  10,  22, 177,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  80,  72, 111,
    110, 101,  73,  70,  46, 116, 101, 115,
    116,  77, 101, 115, 115,  97, 103, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     82,  63,  36, 139,  69, 204,  91, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b1160a9612be6406 = b_b1160a9612be6406.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b1160a9612be6406[] = {
  &s_ed5bcc458b243f52,
};
static const uint16_t m_b1160a9612be6406[] = {0};
static const uint16_t i_b1160a9612be6406[] = {0};
const ::capnp::_::RawSchema s_b1160a9612be6406 = {
  0xb1160a9612be6406, b_b1160a9612be6406.words, 34, d_b1160a9612be6406, m_b1160a9612be6406,
  1, 1, i_b1160a9612be6406, nullptr, nullptr, { &s_b1160a9612be6406, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d175887b9d397b4a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     74, 123,  57, 157, 123, 136, 117, 209,
     29,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  80,  72, 111,
    110, 101,  73,  70,  46, 116, 101, 115,
    116,  77, 101, 115, 115,  97, 103, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d175887b9d397b4a = b_d175887b9d397b4a.words;
#if !CAPNP_LITE
static const uint16_t m_d175887b9d397b4a[] = {0};
static const uint16_t i_d175887b9d397b4a[] = {0};
const ::capnp::_::RawSchema s_d175887b9d397b4a = {
  0xd175887b9d397b4a, b_d175887b9d397b4a.words, 35, nullptr, m_d175887b9d397b4a,
  0, 1, i_d175887b9d397b4a, nullptr, nullptr, { &s_d175887b9d397b4a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<99> b_ed5bcc458b243f52 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     82,  63,  36, 139,  69, 204,  91, 237,
     21,   0,   0,   0,   1,   0,   0,   0,
     54,  11, 191,  20,  31, 173, 185, 219,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  80, 101, 114,
    115, 111, 110,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     97,  16, 213, 254,  36,  87, 139, 214,
      1,   0,   0,   0,  98,   0,   0,   0,
     80, 104, 111, 110, 101,  78, 117, 109,
     98, 101, 114,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 109,  97, 105, 108,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 104, 111, 110, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     97,  16, 213, 254,  36,  87, 139, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 105, 114, 116, 104, 100,  97, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    179,  57, 244, 203, 189, 198,  34, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed5bcc458b243f52 = b_ed5bcc458b243f52.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ed5bcc458b243f52[] = {
  &s_d68b5724fed51061,
  &s_ef29c66fa74a8c93,
};
static const uint16_t m_ed5bcc458b243f52[] = {3, 1, 0, 2};
static const uint16_t i_ed5bcc458b243f52[] = {0, 1, 2, 3};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_ed5bcc458b243f52[] = {
  { 16777219,  ::Date< ::DymmyB>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_ed5bcc458b243f52 = {
  0xed5bcc458b243f52, b_ed5bcc458b243f52.words, 99, d_ed5bcc458b243f52, m_ed5bcc458b243f52,
  2, 4, i_ed5bcc458b243f52, nullptr, nullptr, { &s_ed5bcc458b243f52, nullptr, bd_ed5bcc458b243f52, 0, sizeof(bd_ed5bcc458b243f52) / sizeof(bd_ed5bcc458b243f52[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_d68b5724fed51061 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     97,  16, 213, 254,  36,  87, 139, 214,
     28,   0,   0,   0,   1,   0,   1,   0,
     82,  63,  36, 139,  69, 204,  91, 237,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  80, 101, 114,
    115, 111, 110,  46,  80, 104, 111, 110,
    101,  78, 117, 109,  98, 101, 114,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     63, 105,  68, 236,  53,  35,  67, 225,
      1,   0,   0,   0,  42,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  98, 101, 114,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     63, 105,  68, 236,  53,  35,  67, 225,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d68b5724fed51061 = b_d68b5724fed51061.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d68b5724fed51061[] = {
  &s_e1432335ec44693f,
};
static const uint16_t m_d68b5724fed51061[] = {0, 1};
static const uint16_t i_d68b5724fed51061[] = {0, 1};
const ::capnp::_::RawSchema s_d68b5724fed51061 = {
  0xd68b5724fed51061, b_d68b5724fed51061.words, 52, d_d68b5724fed51061, m_d68b5724fed51061,
  1, 2, i_d68b5724fed51061, nullptr, nullptr, { &s_d68b5724fed51061, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_e1432335ec44693f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     63, 105,  68, 236,  53,  35,  67, 225,
     40,   0,   0,   0,   2,   0,   0,   0,
     97,  16, 213, 254,  36,  87, 139, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  80, 101, 114,
    115, 111, 110,  46,  80, 104, 111, 110,
    101,  78, 117, 109,  98, 101, 114,  46,
     84, 121, 112, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111,  98, 105, 108, 101,   0,   0,
    104, 111, 109, 101,   0,   0,   0,   0,
    119, 111, 114, 107,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1432335ec44693f = b_e1432335ec44693f.words;
#if !CAPNP_LITE
static const uint16_t m_e1432335ec44693f[] = {1, 0, 2};
const ::capnp::_::RawSchema s_e1432335ec44693f = {
  0xe1432335ec44693f, b_e1432335ec44693f.words, 32, nullptr, m_e1432335ec44693f,
  0, 3, nullptr, nullptr, nullptr, { &s_e1432335ec44693f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_e1432335ec44693f, e1432335ec44693f);
static const ::capnp::_::AlignedData<33> b_c32ffe503b3bd079 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    121, 208,  59,  59,  80, 254,  47, 195,
     21,   0,   0,   0,   1,   0,   1,   0,
     54,  11, 191,  20,  31, 173, 185, 219,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  68, 121, 109,
    109, 121,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    121, 101,  97, 114,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c32ffe503b3bd079 = b_c32ffe503b3bd079.words;
#if !CAPNP_LITE
static const uint16_t m_c32ffe503b3bd079[] = {0};
static const uint16_t i_c32ffe503b3bd079[] = {0};
const ::capnp::_::RawSchema s_c32ffe503b3bd079 = {
  0xc32ffe503b3bd079, b_c32ffe503b3bd079.words, 33, nullptr, m_c32ffe503b3bd079,
  0, 1, i_c32ffe503b3bd079, nullptr, nullptr, { &s_c32ffe503b3bd079, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ed22c6bdcbf439b3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    179,  57, 244, 203, 189, 198,  34, 237,
     21,   0,   0,   0,   1,   0,   1,   0,
     54,  11, 191,  20,  31, 173, 185, 219,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  68, 121, 109,
    109, 121,  66,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  97,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed22c6bdcbf439b3 = b_ed22c6bdcbf439b3.words;
#if !CAPNP_LITE
static const uint16_t m_ed22c6bdcbf439b3[] = {0};
static const uint16_t i_ed22c6bdcbf439b3[] = {0};
const ::capnp::_::RawSchema s_ed22c6bdcbf439b3 = {
  0xed22c6bdcbf439b3, b_ed22c6bdcbf439b3.words, 33, nullptr, m_ed22c6bdcbf439b3,
  0, 1, i_ed22c6bdcbf439b3, nullptr, nullptr, { &s_ed22c6bdcbf439b3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<90> b_ef29c66fa74a8c93 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
     21,   0,   0,   0,   1,   0,   1,   0,
     54,  11, 191,  20,  31, 173, 185, 219,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0,  15,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  68,  97, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     34,  45,  67, 166, 164, 243, 252, 212,
      1,   0,   0,   0,  58,   0,   0,   0,
     68, 121, 109, 109, 121,  65,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
    121, 101,  97, 114,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 110, 116, 104,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 121,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     34,  45,  67, 166, 164, 243, 252, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  74,   0,   0,   0,
     89,  69,  65,  82,  84,  89,  80,  69,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ef29c66fa74a8c93 = b_ef29c66fa74a8c93.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ef29c66fa74a8c93[] = {
  &s_d4fcf3a4a6432d22,
};
static const uint16_t m_ef29c66fa74a8c93[] = {2, 1, 3, 0};
static const uint16_t i_ef29c66fa74a8c93[] = {0, 1, 2, 3};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_ef29c66fa74a8c93[] = {
  { 16777219,  ::Date< ::capnp::AnyPointer>::DymmyA::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_ef29c66fa74a8c93 = {
  0xef29c66fa74a8c93, b_ef29c66fa74a8c93.words, 90, d_ef29c66fa74a8c93, m_ef29c66fa74a8c93,
  1, 4, i_ef29c66fa74a8c93, nullptr, nullptr, { &s_ef29c66fa74a8c93, nullptr, bd_ef29c66fa74a8c93, 0, sizeof(bd_ef29c66fa74a8c93) / sizeof(bd_ef29c66fa74a8c93[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<61> b_d4fcf3a4a6432d22 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34,  45,  67, 166, 164, 243, 252, 212,
     26,   0,   0,   0,   1,   0,   0,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116, 100,  97, 116,  97,
     47, 112, 104, 111, 110, 101,  46,  99,
     97, 112, 110, 112,  58,  68,  97, 116,
    101,  46,  68, 121, 109, 109, 121,  65,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
    121, 101,  97, 114,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    121, 208,  59,  59,  80, 254,  47, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    147, 140,  74, 167, 111, 198,  41, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4fcf3a4a6432d22 = b_d4fcf3a4a6432d22.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d4fcf3a4a6432d22[] = {
  &s_ef29c66fa74a8c93,
};
static const uint16_t m_d4fcf3a4a6432d22[] = {1, 0};
static const uint16_t i_d4fcf3a4a6432d22[] = {0, 1};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_d4fcf3a4a6432d22[] = {
  { 16777216,  ::Date< ::Dymmy>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_d4fcf3a4a6432d22 = {
  0xd4fcf3a4a6432d22, b_d4fcf3a4a6432d22.words, 61, d_d4fcf3a4a6432d22, m_d4fcf3a4a6432d22,
  1, 2, i_d4fcf3a4a6432d22, nullptr, nullptr, { &s_d4fcf3a4a6432d22, nullptr, bd_d4fcf3a4a6432d22, 0, sizeof(bd_d4fcf3a4a6432d22) / sizeof(bd_d4fcf3a4a6432d22[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::PHoneIF::TestMessageParams,  ::PHoneIF::TestMessageResults>
PHoneIF::Client::testMessageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PHoneIF::TestMessageParams,  ::PHoneIF::TestMessageResults>(
      0xd826df210eab943eull, 0, sizeHint, {true});
}
::kj::Promise<void> PHoneIF::Server::testMessage(TestMessageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "testdata/phone.capnp:PHoneIF", "testMessage",
      0xd826df210eab943eull, 0);
}
::capnp::Capability::Server::DispatchCallResult PHoneIF::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd826df210eab943eull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("testdata/phone.capnp:PHoneIF", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult PHoneIF::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        testMessage(::capnp::Capability::Server::internalGetTypedContext<
             ::PHoneIF::TestMessageParams,  ::PHoneIF::TestMessageResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "testdata/phone.capnp:PHoneIF",
          0xd826df210eab943eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PHoneIF
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PHoneIF::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PHoneIF::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PHoneIF::TestMessageParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PHoneIF::TestMessageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PHoneIF::TestMessageParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PHoneIF::TestMessageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PHoneIF::TestMessageParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PHoneIF::TestMessageResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PHoneIF::TestMessageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PHoneIF::TestMessageResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PHoneIF::TestMessageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PHoneIF::TestMessageResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Person
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Person::_capnpPrivate::dataWordSize;
constexpr uint16_t Person::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Person::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Person::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Person::PhoneNumber
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Person::PhoneNumber::_capnpPrivate::dataWordSize;
constexpr uint16_t Person::PhoneNumber::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Person::PhoneNumber::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Person::PhoneNumber::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Dymmy
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Dymmy::_capnpPrivate::dataWordSize;
constexpr uint16_t Dymmy::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Dymmy::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dymmy::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// DymmyB
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t DymmyB::_capnpPrivate::dataWordSize;
constexpr uint16_t DymmyB::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind DymmyB::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DymmyB::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



