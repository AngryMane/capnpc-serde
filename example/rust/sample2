classDiagram



class `pushMessage$Results` 
    <<struct>> `pushMessage$Results`

    `pushMessage$Results` : Bool result
    



class `Daty` ~T~
    <<struct>> `Daty`

    `Daty` : EnumTest year
    `Daty` :  month
    `Daty` : Uint8 day
    `Daty` : List~Bool~ target
    `Daty` : address address
    



class `initialize$Params` 
    <<struct>> `initialize$Params`

    `initialize$Params` : `Date~`Daty`~` debug
    



class `finalize$Params` 
    <<struct>> `finalize$Params`

    `finalize$Params` : Bool debug
    





class `GenericsIF` ~T~
<<interface>> `GenericsIF`

GenericsIF : testMessage() ( result)



class `testMessage$Params` 
    <<struct>> `testMessage$Params`

    `testMessage$Params` : `Person` a
    

class EnumTest 
<<enum>> EnumTest

EnumTest : foo
EnumTest : bar
EnumTest : baz
EnumTest : qux


class `subscribe$Params` 
    <<struct>> `subscribe$Params`

    `subscribe$Params` : Subscriber subscriber
    





class `Example` 
<<interface>> `Example`

Example : finalize(Bool debug) (GenericsIF~`Daty`~ result)



class `Dymmy` 
    <<struct>> `Dymmy`

    `Dymmy` : Uint16 year
    



class `subscribe$Results` 
    <<struct>> `subscribe$Results`

    `subscribe$Results` : Bool result
    



class `testMessage$Results` 
    <<struct>> `testMessage$Results`

    `testMessage$Results` : Int8 result
    



class `DymmyA` ~YEARTYPE~
    <<struct>> `DymmyA`

    `DymmyA` : `Date~`Dymmy`~` year
    `DymmyA` :  test
    



class `finalize$Results` 
    <<struct>> `finalize$Results`

    `finalize$Results` : GenericsIF~`Daty`~ result
    



class `PhoneNumber` 
    <<struct>> `PhoneNumber`

    `PhoneNumber` : Text number
    `PhoneNumber` : Type type
    





class `PHoneIF` 
<<interface>> `PHoneIF`

PHoneIF : testMessage(`Person` a) (Int8 result)





class `Sample` 
<<interface>> `Sample`

Sample : initialize(`Date~`Daty`~` debug) (GenericsIF~`Daty`~ result)
Sample : subscribe(Subscriber subscriber) (Bool result)



class `testMessage$Params` ~T~
    <<struct>> `testMessage$Params`

    



class `pushMessage$Params` 
    <<struct>> `pushMessage$Params`

    

class Type 
<<enum>> Type

Type : mobile
Type : home
Type : work


class `address` ~T~
    <<struct>> `address`

    `address` : Uint32 houseNumber
    `address` : Text street
    `address` : Text city
    `address` : Text country
    



class `DymmyB` 
    <<struct>> `DymmyB`

    `DymmyB` : Int8 aa
    



class `Person` 
    <<struct>> `Person`

    `Person` : Text name
    `Person` : Text email
    `Person` : List~`PhoneNumber`~ phones
    `Person` : `Date~`DymmyB`~` birthdate
    



class `Date` ~YEARTYPE~
    <<struct>> `Date`

    `Date` :  year
    `Date` : Uint8 month
    `Date` : Uint8 day
    `Date` : `DymmyA` test
    





class `Subscriber` 
<<interface>> `Subscriber`

Subscriber : pushMessage() (Bool result)



class `initialize$Results` 
    <<struct>> `initialize$Results`

    `initialize$Results` : GenericsIF~`Daty`~ result
    



class `testMessage$Results` ~T~
    <<struct>> `testMessage$Results`

    `testMessage$Results` :  result
    


Daty --> EnumTest : Reference
Daty --> Not-Found : Reference
initialize$Params --> Daty : Reference
initialize$Params --> Date : Reference
testMessage$Params --> Person : Reference
subscribe$Params --> Subscriber : Reference
Example --> Daty : Reference
Example --> GenericsIF : Reference
DymmyA --> Dymmy : Reference
DymmyA --> Date : Reference
finalize$Results --> Daty : Reference
finalize$Results --> GenericsIF : Reference
PhoneNumber --> Type : Reference
PHoneIF --> Person : Reference
Sample --> Daty : Reference
Sample --> Date : Reference
Sample --> Daty : Reference
Sample --> GenericsIF : Reference
Sample --> Subscriber : Reference
Person --> PhoneNumber : Reference
Person --> DymmyB : Reference
Person --> Date : Reference
Date --> DymmyA : Reference
initialize$Results --> Daty : Reference
initialize$Results --> GenericsIF : Reference
